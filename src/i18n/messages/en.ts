const enMessages = {
  'app.title': 'Indra Studio',
  'app.phaseTag': 'Phase 1 foundation',
  'app.language.label': 'Language',
  'toolbar.toggle.presets': 'Presets',
  'toolbar.toggle.inspector': 'Inspector',
  'toolbar.toggle.timeline': 'Timeline',
  'toolbar.action.undo': 'Undo',
  'toolbar.action.redo': 'Redo',
  'toolbar.toggle.presets.aria': 'Toggle presets panel',
  'toolbar.toggle.inspector.aria': 'Toggle inspector panel',
  'toolbar.toggle.timeline.aria': 'Toggle timeline panel',
  'toolbar.navigation': 'Panel toggles',
  'layout.resize.presets': 'Resize preset panel',
  'layout.resize.inspector': 'Resize inspector panel',
  'layout.resize.timeline': 'Resize timeline panel',
  'accessibility.label': 'Accessibility',
  'accessibility.highContrast': 'High contrast',
  'accessibility.highContrast.aria': 'Toggle high contrast mode',
  'accessibility.largeText': 'Large text',
  'accessibility.largeText.aria': 'Toggle large text mode',
  'status.nodes': '{count} nodes',
  'status.connections': '{count} connections',
  'status.manifest.loaded': 'Manifest: {name}',
  'status.manifest.loading': 'Loading manifest…',
  'status.manifest.idle': 'Manifest idle',
  'status.manifest.ready': 'ready',
  'status.gpu.ready': '{backend} • {hz}Hz{adapter}',
  'status.gpu.initializing': 'Initialising GPU context…',
  'status.gpu.error': 'GPU error: {message}',
  'status.gpu.idle': 'GPU idle',
  'status.gpu.unavailable': 'unavailable',
  'status.gpu.adapter': ' • {name}',
  'presetsPanel.title': 'Preset Library',
  'presetsPanel.loading': 'Validating manifest…',
  'presetsPanel.loaded': 'Loaded: {name}',
  'presetsPanel.error': '{message}',
  'presetsPanel.idle': 'Load a manifest to populate nodes & parameters.',
  'presetsPanel.media.processing': '{message} • {progress}%',
  'presetsPanel.media.processing.default': 'Processing media…',
  'presetsPanel.media.processing.badge': 'Processing',
  'presetsPanel.media.count': '{count} media asset',
  'presetsPanel.media.count.plural': '{count} media assets',
  'presetsPanel.loadManifest': 'Load manifest…',
  'presetsPanel.mediaInput.title': 'Media input',
  'presetsPanel.mediaInput.drop': 'Drop images or videos here, or',
  'presetsPanel.mediaInput.drop.label': 'Drop media files here or browse to import',
  'presetsPanel.mediaInput.browse': 'Browse media…',
  'presetsPanel.mediaInput.empty':
    'Imported media will appear below with generated thumbnails. Each asset becomes a source node in the scene graph.',
  'presetsPanel.media.noPreview': 'No preview',
  'presetsPanel.media.processing': 'Processing',
  'presetsPanel.media.error': 'Error',
  'presetsPanel.media.remove': 'Remove',
  'presetsPanel.gallery.title': 'Preset gallery',
  'presetsPanel.gallery.save': 'Save current…',
  'presetsPanel.gallery.export': 'Export manifest',
  'presetsPanel.gallery.empty': 'Load a manifest to unlock preset controls.',
  'presetsPanel.gallery.builtin': 'Built-in',
  'presetsPanel.gallery.saved': 'Saved',
  'presetsPanel.examples.title': 'Example manifests',
  'presetsPanel.examples.apply': 'Apply preset',
  'presetsPanel.validation.title': 'Validation warnings',
  'presetsPanel.preset.sample.phaseOne': 'Phase One Demo',
  'presetsPanel.preset.sample.phaseOne.description':
    'Loads the scaffolded manifest bundled with the project.',
  'presetsPanel.prompt.name': 'Preset name',
  'presetsPanel.prompt.name.placeholder': 'Custom preset',
  'presetsPanel.prompt.description': 'Description (optional)',
  'inspector.title': 'Inspector',
  'inspector.empty':
    'Load a manifest with control metadata to unlock interactive parameter editing.',
  'inspector.expand': 'Expand',
  'inspector.collapse': 'Collapse',
  'timeline.title': 'Timeline',
  'timeline.play': 'Play',
  'timeline.pause': 'Pause',
  'timeline.timeLabel': 'Time',
  'timeline.empty':
    'Keyframe clips will appear here once the manifest defines animated parameters for nodes in the scene graph.',
  'timeline.clip.keyframes': '{count} keyframes',
  'timeline.footer': '{fps} fps • {duration}s total',
  'viewport.title': 'Viewport',
  'viewport.footer':
    'Metal-compatible WebGPU preferred • WebGL2 fallback will engage automatically.',
  'viewport.overlay.source': 'Source',
  'viewport.overlay.edges': 'Edges',
  'viewport.overlay.phase': 'Phase',
  'viewport.overlay.focus': 'Focus node',
  'viewport.placeholder.idle': 'Scene graph is idle.',
  'viewport.placeholder.load': 'Load a manifest or import media to initialise the render graph.',
  'viewport.canvas.label': 'Rendered viewport canvas showing the current scene.',
  'language.option.en': 'English',
  'language.option.es': 'Español',
  'autotune.title': 'Autotune',
  'autotune.description':
    'Let the assistant explore parameter combinations and suggest balanced settings.',
  'autotune.run': 'Run Autotune',
  'autotune.progress': 'Evaluated {current} of {total} trials',
  'autotune.result.summary': 'Best score {score} (Δ {delta}) • {seconds}s',
  'autotune.result.noChanges': 'No significant improvements detected this run.',
  'autotune.result.apply': 'Apply suggestions',
  'autotune.result.dismiss': 'Dismiss',
  'autotune.status.idle': 'Ready to search for stronger configurations.',
  'autotune.error.no-controls': 'Autotune needs a loaded manifest with tunable parameters.',
  'autotune.error.no-numeric-fields':
    'No numeric controls available for tuning in the active panels.',
  'autotune.error.failed': 'Autotune failed: {message}',
  'beamSplitter.title': 'Beam-Splitter Network',
  'beamSplitter.source.primary': 'Primary field',
  'beamSplitter.source.edge': 'Edge map',
  'beamSplitter.source.phase': 'Phase field',
  'beamSplitter.source.oscillator': 'Oscillator',
  'beamSplitter.source.surface': 'Surface map',
  'beamSplitter.source.unknown': 'Unknown source',
  'beamSplitter.symmetry.identity': 'Identity',
  'beamSplitter.symmetry.rotation': 'Rotation',
  'beamSplitter.symmetry.mirrorX': 'Mirror X',
  'beamSplitter.symmetry.mirrorY': 'Mirror Y',
  'beamSplitter.transform.kind.rotate': 'Rotate',
  'beamSplitter.transform.kind.scale': 'Scale',
  'beamSplitter.transform.kind.mirror': 'Mirror',
  'beamSplitter.transform.title': 'Transform stack',
  'beamSplitter.transform.add': '+ {label}',
  'beamSplitter.transform.empty': 'Stack empty. Add a transform to begin shaping this branch.',
  'beamSplitter.transform.stepLabel': 'Step {index}: {kind}',
  'beamSplitter.transform.degrees': 'Degrees',
  'beamSplitter.transform.factor': 'Factor',
  'beamSplitter.transform.axis': 'Axis',
  'beamSplitter.transform.axisX': 'X axis',
  'beamSplitter.transform.axisY': 'Y axis',
  'beamSplitter.common.remove': 'Remove',
  'beamSplitter.actions.duplicate': 'Duplicate',
  'beamSplitter.fields.label': 'Label',
  'beamSplitter.fields.source': 'Source',
  'beamSplitter.fields.symmetry': 'Symmetry',
  'beamSplitter.fields.weight': 'Weight',
  'beamSplitter.fields.priority': 'Priority',
  'beamSplitter.diagnostics.title': 'Diagnostics',
  'beamSplitter.diagnostics.energy': 'Energy',
  'beamSplitter.diagnostics.contribution': 'Contribution',
  'beamSplitter.diagnostics.coverage': 'Coverage',
  'beamSplitter.diagnostics.occlusion': 'Occlusion',
  'beamSplitter.diagnostics.percent': '{value}%',
  'beamSplitter.diagnostics.placeholder':
    'Branch diagnostics will appear once the GPU compositor emits telemetry.',
  'beamSplitter.graph.inputTitle': 'Input',
  'beamSplitter.graph.inputSubtitle': 'Captured field',
  'beamSplitter.graph.energyOcclusion': '{energy}% energy · {occlusion}% occl.',
  'beamSplitter.graph.energyValue': '{value}% energy',
  'beamSplitter.graph.badge.muted': 'Muted',
  'beamSplitter.graph.recombineTitle': 'Recombine',
  'beamSplitter.graph.addBranch': 'Add branch',
  'beamSplitter.recombine.label': 'Recombine',
  'beamSplitter.recombine.sum': 'Additive sum',
  'beamSplitter.recombine.sum.description': 'Superpose complex fields without normalisation.',
  'beamSplitter.recombine.average': 'Mean',
  'beamSplitter.recombine.average.description': 'Average branch amplitudes by total weight.',
  'beamSplitter.recombine.energy': 'Energy-normalised',
  'beamSplitter.recombine.energy.description': 'Scale by total energy (sqrt of weight^2 sum).',
  'beamSplitter.recombine.priority': 'Priority mask',
  'beamSplitter.recombine.priority.description':
    'Highest-priority branch dominates where overlaps occur.',
  'beamSplitter.recombine.max': 'Max intensity',
  'beamSplitter.recombine.max.description':
    'Take the branch with the strongest instantaneous intensity per pixel.',
  'beamSplitter.recombine.phase': 'Phase interference',
  'beamSplitter.recombine.phase.description':
    'Sum complex fields and resolve interference fringes.',
  'beamSplitter.recombine.unknown': 'Unknown mode',
  'beamSplitter.summary.single': '{count} branch · {mode}',
  'beamSplitter.summary.plural': '{count} branches · {mode}',
  'beamSplitter.empty': 'Add a branch to start shaping the beam-splitter network.',
};

export type EnMessages = typeof enMessages;

export default enMessages;
